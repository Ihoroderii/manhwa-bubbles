name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Run Black formatter check
      run: |
        black --check manhwa_bubbles/ examples/ test_library.py || echo "⚠️ Code formatting check completed"
    
    - name: Run Flake8 linter
      run: |
        flake8 manhwa_bubbles/ --max-line-length=100 || echo "⚠️ Linting check completed"

  test-functionality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow build
        pip install -e .
    
    - name: Test all bubble types individually
      run: |
        python -c "
        from PIL import Image, ImageDraw
        from manhwa_bubbles import speech_bubble
        
        # Test each bubble type
        bubble_types = ['oval', 'rect', 'cloud', 'jagged', 'wavy', 'black', 'heart', 'spiky', 'glow', 'scratchy']
        img = Image.new('RGB', (500, 400), 'white')
        draw = ImageDraw.Draw(img)
        
        for i, bubble_type in enumerate(bubble_types):
            x = (i % 5) * 90 + 10
            y = (i // 5) * 90 + 10
            try:
                speech_bubble(draw, (x, y, 80, 60), bubble_type[:4], bubble_type)
                print(f'✅ {bubble_type} bubble works')
            except Exception as e:
                print(f'❌ {bubble_type} bubble failed: {e}')
                raise
        
        img.save('all_bubbles_py${{ matrix.python-version }}.png')
        print(f'✅ All {len(bubble_types)} bubble types tested successfully on Python ${{ matrix.python-version }}')
        "
    
    - name: Test narration boxes
      run: |
        python -c "
        from PIL import Image, ImageDraw
        from manhwa_bubbles import narrator_plain, narrator_dark, narrator_wavy
        
        img = Image.new('RGB', (400, 300), 'lightgray')
        draw = ImageDraw.Draw(img)
        
        narrator_plain(draw, (10, 10, 180, 60), 'Plain test')
        narrator_dark(draw, (10, 80, 180, 60), 'Dark test')  
        narrator_wavy(draw, (10, 150, 180, 60), 'Wavy test')
        
        img.save('narrators_py${{ matrix.python-version }}.png')
        print('✅ Narration boxes tested successfully')
        "
    
    - name: Run main test suite
      run: python test_library.py
    
    - name: Upload test images
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-images-py${{ matrix.python-version }}
        path: "*.png"

  integration-test:
    runs-on: ubuntu-latest
    needs: test-functionality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install and test package
      run: |
        python -m pip install --upgrade pip
        pip install build
        python -m build
        pip install dist/*.whl
        
        # Test installation worked
        python -c "
        from manhwa_bubbles import speech_bubble, narrator_plain
        from PIL import Image, ImageDraw
        
        img = Image.new('RGB', (400, 200), 'white')
        draw = ImageDraw.Draw(img)
        
        speech_bubble(draw, (10, 10, 100, 60), 'Hello!', 'oval')
        narrator_plain(draw, (150, 10, 200, 60), 'Integration test')
        
        img.save('integration_test.png')
        print('✅ Integration test passed - package installs and works!')
        "
    
    - name: Upload integration test
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-result
        path: "integration_test.png"